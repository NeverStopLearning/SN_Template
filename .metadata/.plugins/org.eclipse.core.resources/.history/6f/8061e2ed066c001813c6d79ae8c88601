import React, { Component } from 'react';
import { Link, withRouter } from 'react-router-dom';

//redux
import {connect} from 'react-redux';
import PropTypes from 'prop-types';

//components
import TextFieldGroup from '../common/TextFieldGroup.js';
import TextAreaFieldGroup from '../common/TextAreaFieldGroup.js';

//action


//To fix the problem with errors not always being removed, look into adding a "onComponentUnload" if one or something
//Or add a variable in the error object that tells if the error has already been displayed. 
class AddExperience extends Component {
	
	constructor(props){
		super(props);
		
		this.state = {
				company:'',
				title:'',
				location:'',
				from:'',
				to:'',
				current:false,
				description:'',
				errors:{},
				disabled:false	
		};
	
		this.handleSubmit = this.handleSubmit.bind(this);
	}
	
	
	render(){
		
		const { errors } = this.state;
		
		return(
				<div className='add-experience'>
					<div className='container'>
						<div className='row'>
							<div className='col-md-8 m-auto'>
							
								<Link to="/dashboard" className="btn btn-light">Go Back</Link>
								<h1 className="display-4 text-center">Add Experience</h1>
								
								<p className="lead text-center">List all jobs/positions held within the last 5 years</p>
								<small className="d-block pb-3">* = required fields</small>
								
								<form onSubmit={this.handleSubmit}>
								
									<TextFieldGroup 
										placeholder="* Company"
										name="company"
										value={this.state.company}
										onChange={this.handleChange}
										errors={errors.company}
									/>
									
									{/*<input type="submit" value="Submit" /> */}
								</form>
								
							</div>
						</div>
					</div>
				</div>
		)
	}
	
	
	
	handleSubmit(ev){
		ev.preventDefault();
		
		console.log("ping");
	}
	
}


AddExperience.propTypes = {
	profile: PropTypes.object.isRequired,
	errors: PropTypes.object.isRequired
};


const mapStateToProps = (state) => ({
	profile: state.profile,
	errors: state.errors
});



export default connect(mapStateToProps)(withRouter(AddExperience));


